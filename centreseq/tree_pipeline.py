import logging
from pathlib import Path

import click

from centreseq.bin.core import set_cpu_count
from centreseq.bin.tree import tree_pipeline

__version__ = "0.0.1"
__authors__ = ["Forest Dussault"]
__email__ = "forest.dussault@canada.ca"


def print_version(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    logging.info(f"Version: {__version__}")
    logging.info(f"Author: {__authors__}")
    logging.info(f"Email: {__email__}")
    quit()


def convert_to_path(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    return Path(value)


def setup_logger(logger_name: str, log_file: Path, title: str, level=logging.INFO):
    logger = logging.getLogger(logger_name)
    formatter = logging.Formatter(f'\033[92m \033[1m %(asctime)s - {title} %(levelname)s:\033[0m %(message)s ',
                                  "%Y-%m-%d %H:%M:%S")
    file_formatter = logging.Formatter(f'[%(asctime)s - %(levelname)s]\t %(message)s', "%Y-%m-%d %H:%M:%S")
    file_handler = logging.FileHandler(log_file, mode='w')
    file_handler.setFormatter(file_formatter)
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(formatter)

    logger.setLevel(level)
    logger.addHandler(file_handler)
    logger.addHandler(stream_handler)


@click.command(help="Processes output files from core pipeline to produce trees")
@click.option('-s', '--summary-report',
              type=click.Path(exists=True),
              required=True,
              help='Path to summary_report.csv file produced by the core pipeline',
              callback=convert_to_path)
@click.option('-p', '--prokka-dir',
              type=click.Path(exists=True),
              required=True,
              help='Path to the Prokka output directory generated by the core pipeline',
              callback=convert_to_path)
@click.option('-o', '--outdir',
              type=click.Path(exists=False),
              required=True,
              help='Root directory to store all output files',
              callback=convert_to_path)
@click.option('-pct', '--percentile',
              type=click.FLOAT,
              required=False,
              default=99.0,
              help='Filter summary report by n_members to the top nth percentile. Defaults to 99.0.')
@click.option('-n', '--n-cpu',
              type=click.INT,
              required=False,
              default=None,
              help='Number of CPUs to dedicate to parallelizable steps of the pipeline.'
                   'Will take all available CPUs - 1 if not specified.')
@click.option('-v', '--verbose',
              is_flag=True,
              default=False,
              help='Set this flag to enable more verbose logging.')
@click.option('--version',
              help='Use this flag to print the version and exit.',
              is_flag=True,
              is_eager=True,
              callback=print_version,
              expose_value=False)
def cli(summary_report: Path, prokka_dir: Path, outdir: Path, percentile: float, n_cpu: int, verbose: bool):
    # Outdir validation
    if outdir.exists():
        logging.error(f"ERROR: Directory {outdir} already exists!")
        quit()
    outdir.mkdir()

    # Setup logging
    log_dir = outdir / 'logs'
    log_dir.mkdir(parents=True)
    main_log_file = log_dir / 'tree_pipeline.log'
    if verbose:
        setup_logger(logger_name='main_log', log_file=main_log_file, title="TreePipeline", level=logging.DEBUG)
    else:
        setup_logger(logger_name='main_log', log_file=main_log_file, title="TreePipeline", level=logging.INFO)
    main_log = logging.getLogger('main_log')

    # Set CPU count
    if n_cpu is None:
        n_cpu = set_cpu_count(n_cpu)

    main_log.info("Started Core Tree Pipeline")
    main_log.debug(f"summary_report: {summary_report}")
    main_log.debug(f"prokka_dir: {prokka_dir}")
    main_log.debug(f"outdir: {outdir}")
    main_log.debug(f"percentile: {percentile}")
    main_log.debug(f"n_cpu: {n_cpu}")
    main_log.debug(f"verbose: {verbose}")

    # Call the pipeline!
    tree_pipeline(summary_report=summary_report,
                  prokka_dir=prokka_dir,
                  outdir=outdir,
                  n_cpu=n_cpu,
                  percentile=percentile)


if __name__ == "__main__":
    cli()
