Examples
~~~~~~~~


Getting started
^^^^^^^^^^^^^^^

Given a directory with the following 10 complete genome assemblies:

::

   /home/user/assemblies/
    ├── Amager.1684.BMH.fasta
    ├── Braenderup.276.BMH.fasta
    ├── Citro.freundii.ID133751.fasta
    ├── Citro.sp.ID135111.fasta
    ├── Citro.werkmanii.ID060152.fasta
    ├── Daytona.100.BMH.fasta
    ├── Duesseldorf.2372.BMH.fasta
    ├── Enteritidis.GC138550.fasta
    ├── Enteritidis.GC148474.fasta
    └── Fresno.2879.BMH.fasta

We can run the following command to run centreseq against our 10 input genomes with 16 cores, with all output being
routed to `/home/user/centreseq_output`:

::

    centreseq core -f /home/user/assemblies/ -o /home/user/centreseq_output -n 16 --pairwise

Once the program has finished, the following structure can be found in your output directory:

::

    /home/user/centreseq_output
    ├── core_genome
    ├── logs
    ├── mmseqs2
    ├── network_graph_coding.tsv
    ├── network_graph.html
    ├── prokka
    └── reports

An overview of the results can be found in the reports directory. Raw data from the core pipeline can be found in the
*/core_genome*, */mmseqs2*, and */prokka* directories.


Launching the network chart
^^^^^^^^^^^^^^^^^^^^^^^^^^^

To view the network chart, open a bash terminal, `cd` to your output directory generated by the `centreseq core` script, and run the following command:

::

    python -m http.server 8080

This will start a simple server at port 8080 that you can navigate to via a web browser (e.g. `http://0.0.0.0:8080`). Navigate to the server in your browser
of choice (Chrome, Chromium or Firefox) and open network_graph.html. From here, you can interrogate the relationships
among your input genomes according to pairwise similarity values. Note that the `--pairwise` flag must have been
activated in order for these files to be generated.
